// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unlimited.Repository;

#nullable disable

namespace Unlimited.Repository.Migrations
{
    [DbContext(typeof(UnlimitedDbContext))]
    [Migration("20240405155717_UnlimitedDBv1.6")]
    partial class UnlimitedDBv16
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Card", b =>
                {
                    b.Property<int>("Set")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int[]>("Arenas")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("Aspects")
                        .HasColumnType("integer[]");

                    b.Property<string>("BackArt")
                        .HasColumnType("text");

                    b.Property<string>("BackText")
                        .HasColumnType("text");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("0");

                    b.Property<bool>("DoubleSided")
                        .HasColumnType("boolean");

                    b.Property<string>("EpicAction")
                        .HasColumnType("text");

                    b.Property<string>("FrontArt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FrontText")
                        .HasColumnType("text");

                    b.Property<string>("HP")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("0");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int[]>("Keywords")
                        .HasColumnType("integer[]");

                    b.Property<decimal?>("MarketPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Power")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("0");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("None");

                    b.Property<int[]>("Traits")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Unique")
                        .HasColumnType("boolean");

                    b.Property<string>("VariantType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Set", "Number");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df99c1ef-711e-497a-bf08-a08302de62af"),
                            UserId = new Guid("e470e39a-9b7b-4a6e-bd70-c21612f20edc")
                        });
                });

            modelBuilder.Entity("Models.CollectionCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<int>("CardMake")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionCards");
                });

            modelBuilder.Entity("Models.CurrencyData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e470e39a-9b7b-4a6e-bd70-c21612f20edc"),
                            AuthId = 1,
                            Email = "admin@unlimited.co.za"
                        });
                });

            modelBuilder.Entity("Models.CollectionCard", b =>
                {
                    b.HasOne("Models.Collection", null)
                        .WithMany("Cards")
                        .HasForeignKey("CollectionId");
                });

            modelBuilder.Entity("Models.Collection", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
